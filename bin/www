#!/usr/bin/env node

/**
 * Read config if it exists, or fallback on
 * real env variables.
 */

require('dotenv').config({
  path: 'env',
  silent: true
});

var debug = require('debug')('furifuri-dashboard:server');
var connection = require('../connection');

// Get port from environment
var port = normalizePort(process.env.PORT || '3000');

connection
.onConnect
.then(function(){
  console.log('Connected to database.');

  var app = require('../app');
  var http = require('http');

  // store port in Express.
  app.set('port', port);

  // Create HTTP server.
  var server = http.createServer(app);

  // Listen on provided port, on all network interfaces.
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening.bind(null, server));

  console.log('App running in mode:', app.get('env'));
  console.log('App now listening on port:', port);
})
.catch(function(error){
  console.log('Error connection to db:', error);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
